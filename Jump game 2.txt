Given an array of N integers arr[] where each element represents the max number of steps that can be made forward from that element. Find the minimum number of jumps to reach the end of the array (starting from the first element). If an element is 0, then you cannot move through that element.
Note: Return -1 if you can't reach the end of the array.

class Solution{
  public:
    int minJumps(int arr[], int n){
        // Your code here
        if(n<=1)
            return 0;
        if(arr[0]==0)
            return -1;
        int max_reach = arr[0], steps = arr[0], jump = 1; // jump 1 from index 0
        for(int i=1;i<n;i++)
        {
            if(i==n-1)
                return jump;
            max_reach = max(max_reach, i+arr[i]); // keep updating maximum reachable index
            steps = steps-1; // keep track of steps in current jump
            if(steps==0) // steps from current jump finished
            {
                jump+=1; // next jump
                if(i >= max_reach) // if current index i is beyond maximum possible reachable index
                    return -1;
                steps = max_reach-i; // remaining steps will be max_reach - current index
            }
        }
        return -1;
    }
};
