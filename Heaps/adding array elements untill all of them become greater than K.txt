Given an array Arr[] of size N and an integer K, you have to add the first two minimum elements of the array until all the elements are greater than or equal to K and find the number of such operations required.

Use min heap
add top two minimum elements and push to in heap
increase ops count by 1
if top of min heap now is >= k return count

class Solution{
  public:
    int minOperations(int arr[], int n, int k) {
        // code here
        priority_queue<int,vector<int>,greater<int>> pq;
        for(int i=0;i<n;i++)
            pq.push(arr[i]);
        if(pq.top() >= k)
            return 0;
        int count = 0;
        while(pq.size()>=2)
        {
            int min1 = pq.top();
            pq.pop();
            int min2 = pq.top();
            pq.pop();
            pq.push(min1+min2);
            count = count+1;
            if(pq.top()>=k)
                break;
        }
        return count;
    }
};
