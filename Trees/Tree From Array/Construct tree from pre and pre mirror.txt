int find(vector<int> arr, int data)
{
    for(int i=0;i<arr.size();i++)
        if(arr[i] == data)
            return i;
    return -1;
}
Node *util(vector<int> pre, vector<int> premirror)
{
    if(pre.empty())
        return NULL;
    Node *root = new Node(pre[0]);
    if(pre.size() == 1)
        return root;
    int index = find(premirror, pre[1]);
    vector<int> pre_left,pre_right;
    vector<int> mirror_left,mirror_right;
    for(int i=1;i<index;i++)
    {
        pre_left.push_back(pre[i]);
        mirror_right.push_back(premirror[i]);
    }
    for(int i=index;i<premirror.size();i++)
    {
        pre_right.push_back(pre[i]);
        mirror_left.push_back(premirror[i]);
    }
    root->left = util(pre_left,mirror_left);
    root->right = util(pre_right,mirror_right);
    return root;
}
Node* constructBinaryTree(int pre[], int preMirror[], int size)
{
    // Code here
    vector<int> Pre,PreMirror;
    for(int i=0;i<size;i++)
    {
        Pre.push_back(pre[i]);
        PreMirror.push_back(preMirror[i]);
    }
    return util(Pre, PreMirror);
}

//space efficient


Node* constructBinaryTreeUtil(int pre[], int preM[],
                    int &preIndex, int l,int h,int size)
{   
    
    if (preIndex >= size || l > h)
        return NULL;
 
    Node* root = newNode(pre[preIndex]);
    ++(preIndex);
 
    if (l == h)
        return root;
     
    int i;
    for (i = l; i <= h; ++i)
        if (pre[preIndex] == preM[i])
            break;
   
    if (i <= h)
    {
        root->left = constructBinaryTreeUtil (pre, preM,
                                    preIndex, i, h, size);
        root->right = constructBinaryTreeUtil (pre, preM,
                                 preIndex, l+1, i-1, size);
    }
  
    return root;   
}
preIndex = 0;
root =  constructBinaryTreeUtil(pre,preMirror,preIndex,0,size-1,size);