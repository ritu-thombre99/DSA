
Given an array of size N that can be used to represents a tree. The array indexes are values in tree nodes and array values give the parent node of that particular index (or node). The value of the root node index would always be -1 as there is no parent for root. Construct the standard linked representation of Binary Tree from this array representation.

class Solution{
  public:
    //Function to construct binary tree from parent array.
    void search(int parent[], int &l, int &r, int x, int N)
    {
        int i=0;
        while(i<N)
        {
            if(parent[i]==x)
            {
                l=i;
                break;
            }
            i=i+1;
        }
        i=i+1;
        while(i<N)
        {
            if(parent[i]==x)
            {
                r=i;
                break;
            }
            i=i+1;
        }
        
    }
    Node *util(int parent[], int root_data, int N)
    {
        Node *root = new Node(root_data);
        int left_index = -1;
        int right_index = -1;
        search(parent,left_index,right_index,root_data,N);
        if(left_index==-1 && right_index==-1)
            return root;
        if(left_index!=-1)
            root->left = util(parent, left_index, N);
        if(right_index!=-1)
            root->right = util(parent, right_index, N);
        return root;
    }
    Node *createTree(int parent[], int N)
    {
        // Your code here
        int root_data;
        for(int i=0;i<N;i++)
            if(parent[i] == -1)
                root_data = i;

        return util(parent,root_data,N);
    }
};