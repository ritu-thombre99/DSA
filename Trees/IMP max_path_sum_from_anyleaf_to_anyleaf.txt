class Solution {
public:
    int util(Node* root, int &max_sum)
    {
        if(!root)
            return 0;
        if(!root->left && !root->right)
            return root->data;
        int ls = util(root->left, max_sum);
        int rs = util(root->right, max_sum);
        if(root->left && root->right)
        {
            max_sum = max(max_sum, ls+rs+root->data);
            return max(ls,rs)+root->data;
        }
        if(root->left)
            return ls+root->data;
        else
            return rs+root->data;
            
    }
    int maxPathSum(Node* root)
    {
        // code here
        int max_sum = INT_MIN;
        int val = util(root, max_sum);
          //--- for test case ---
       //         7                 
      //        /    \               
        //    Null   -3            
      //     (case - 1)         
      //   value of res will be INT_MIN but the answer is 4 , which is returned by the 
      // function maxPathSumUtil().
        if(root->left && root->right)
            return max_sum;
        
        return max(max_sum, val);
    }
};