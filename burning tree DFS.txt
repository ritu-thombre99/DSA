burning tree
 
Method 1 : DFS approach
Only to count the time'
Cannot print nodes

0. If root is null return 0 as no fired node present
1. If node is found set time=max(time, depth(root)-1)) since time taken to burn the tree if root is the origin of fire will be equal to height of the tree
   return 1 to show that fired node is present in current tree
2. call left and right recursively
   ans = function(root->left, time)
   if ans if 0 then fired is not present in left subtree
   else time = max(time, height(root->right)+ans) i.e maximum time to burn tree will be equal to time taken to burn left subtree (returned from previous recursive call) + depth of right subtree
   return ans+1 which is time taken to burn current left subtree

   if left subtree doesnt contain fired node, repet the process for right node

   return 0 if both left anf right calls return 0 to show there is no fired node in current tree
class Solution {
  public:
int maxDepth(Node* root)
  {
      if(root==NULL)return 0;
      return 1 + max(maxDepth(root->left),maxDepth(root->right));
  }
  
  int burning(Node* root,int tar,int &res)
  {
      if(root==NULL)return 0;
      
      if(root->data==tar)
      {
           res = max(res, maxDepth(root)-1);
           return 1;
      }
      
      int ans = burning(root->left,tar,res);
      if(ans)
      {
          res = max(res, ans+ maxDepth(root->right));
          return ans+1;
      }
      
      ans = burning(root->right,tar,res);
      if(ans)
      {
          res = max(res, ans+ maxDepth(root->left));
          return ans+1;
      }
      return 0;
  }
    int minTime(Node* root, int target) 
    {
        int res=0;
        burning(root,target,res);
        return res;
        
    }
};
