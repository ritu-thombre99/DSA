Given a string A and a dictionary of n words B, find out if A can be segmented into a space-separated sequence of dictionary words. 


Create trie of all dict words
check for substr(0,i) if exist as word in trie (i.e prefix) DP
and check if latter part substr(i,len) satsfies the separability condition recursivelt

complexity - length of dict * length of word for creating trie
and length of search word for checking


typedef struct Node
{
    bool leaf;
    struct Node *children[26];
}Node;

Node *new_node()
{
    Node *node = new Node();
    node->leaf = false;
    for(int i=0;i<26;i++)
        node->children[i] = NULL;
    return node;
}

void insert(Node **root, string key)
{
    Node *ptr = *root;
    for(int i=0;i<key.length();i++)
    {
        int index = key[i] - 'a';
        if(!ptr->children[index])
            ptr->children[index] = new_node();
        ptr = ptr->children[index];
    }
    ptr->leaf = true;
}

bool search(Node *root, string key)
{
    Node *ptr = root;
    for(int i=0;i<key.length();i++)
    {
        int index = key[i] - 'a';
        if(!ptr->children[index])
            return false;
        ptr = ptr->children[index];
    }
    return ptr->leaf;
}

class Solution{
    public:
    // A : given string to search
    // B : vector of available strings
    bool check(string A, Node *root)
    {
        if(A.size()==0)
            return true;
        for (int i=1; i<=A.size(); i++)
        {
            if(search(root, A.substr(0, i)) && check(A.substr(i, A.size()-i), root))
                return true;
        }
        return false;
    }
    int wordBreak(string A, vector<string> &B) {
        //code here
        Node *root = new_node();
        for(int i=0;i<B.size();i++)
            insert(&root,B[i]);
        bool is_separable = check(A,root);
        return is_separable;
        
    }
};