Given an integer array. The task is to find the maximum of the minimum of every window size in the array.
Note: Window size varies from 1 to the size of the Array.



class Solution
{
    public:
    //Function to find maximum of minimums of every window size.
    void get_next_smaller(int arr[], vector<int> &right, int n)
    {
        stack<int> index;
        index.push(0);
        for(int i=1;i<n;i++)
        {
            if(!index.empty() && arr[i] >= arr[index.top()])
                index.push(i);
            else
            {
                while(!index.empty() && arr[i]<arr[index.top()])
                {
                    right[index.top()] = i;
                    index.pop();
                }
                index.push(i);
            }
        }
    }
    void get_prev_smaller(int arr[], vector<int> &left, int n)
    {
        stack<int> index;
        index.push(n-1);
        for(int i=n-2;i>=0;i--)
        {
            if(!index.empty() && arr[i] >= arr[index.top()])
                index.push(i);
            else
            {
                while(!index.empty() && arr[i]<arr[index.top()])
                {
                    left[index.top()] = i;
                    index.pop();
                }
                index.push(i);
            }
        }
    }
    vector <int> maxOfMin(int arr[], int n)
    {
        // Your code here
        vector<int> left(n,-1),right(n,n);
        get_prev_smaller(arr,left,n); // index of first smaller element on the left
        get_next_smaller(arr,right,n); // index of first smaller element on the right
        vector<int> ans(n+1,0);

	// arr[i] is maximum of window size for window size right(i)-left(i)-1
	// eg [10 30 20 40 6] for 20 i.e index=2 prev_smaller = 0(i.e 10) and next smaller is 5(i.e 6)
	// so all other elements from index=1 to 4 are greater than 20
	// so 20 is the smallest from index 1-4 i.e window size 4 (which is right(i)-left(i)-1)
        for(int i=0;i<n;i++)
        {
            int len = right[i]-left[i]-1;
            ans[len] = max(arr[i],ans[len]); // if same length present more than once
        }
	// Result for length i, i.e. ans[i] would always be greater or 
	// same as result for length i+1, i.e., ans[i+1]. 
        for(int i=n-1;i>=1;i--)
            ans[i] = max(ans[i],ans[i+1]);
        ans.erase(ans.begin());
        return ans;
    }
};