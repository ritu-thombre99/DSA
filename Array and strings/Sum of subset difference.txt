Given an array S consisting of N numbers, find the sum of difference between last and first element of each subset.
for a given set of size N, there are total (2^N) possible sets
e.g for {1,2,3,4} there are
{}
{1},{2},{3},{4}		
{1,2},{1,3},{1,4},{2,3},{2,4},{3,4}
{1,2,3},{1,3,4},{1,2,4},{2,3,4}
{1,2,3,4}
i.e 1+4+6+4+1 = 16

Notice that 1st element (1) appears 8 times at first postition of subsets
	    2nd elemtn (2) appears 4 times at first position
	    i.e ith element appears pow(2,i) times at first position
	    last element appears only once (here {4})

	similarly for last element, 1st element only appears once at last (here {1})

there fore we can directly calculate difference in sum of last and first elements of all subsets

for i=0 to N-1:
	a = number of times arr[i] is first element : 2^(N-1-i)
	b = number of times arr[i] is last element : 2^i
	ans = ans + (b-a)

sumSetDiff(S) = ∑ (last(s) – first(s)), where sum goes over all subsets s of S.
Equivalently,
sumSetDiff(S) = ∑ (last(s)) – ∑ (first(s)),

int sumDiff(int S[], int n)
{
    //Your code here
    int ans = 0;
    for(int i=0;i<n;i++)
        ans += (pow(2,i)-pow(2,n-i-1))*S[i];
    return ans;
}