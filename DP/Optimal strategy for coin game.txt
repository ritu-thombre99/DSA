You are given an array A of size N. The array contains integers and is of even length. The elements of the array represent N coin of values V1, V2, ....Vn. You play against an opponent in an alternating way.

In each turn, a player selects either the first or last coin from the row, removes it from the row permanently, and receives the value of the coin.

You need to determine the maximum possible amount of money you can win if you go first.
Note: Both the players are playing optimally.


Time and space complexity both - O(n square)

recurrence relation:
for arr[i.......j]
option1- we choose arr[i]
	 opponent has arr[i+1....j]
	 opponent will choose option which will minimize our score 
		if opponent chooses i+1 we will have arr[i+2....j]
		if oppenent choose j-1 we will have arr[i+1....j-1]
		opponent will choose the option which will lead us to have minimum score so min(dp[i+1][j-1],dp[i+2][j])

similarly if we choose j

so recurrence relation will be:

op1 = arr[i] + min(dp[i+2][j],dp[i+1][j-1])
op2 = arr[j] + min(dp[i][j-2],dp[i+1][j-1])
dp[i][j]=max(op1,op2) // we maximize our score


class Solution{
    public:
    long long maximumAmount(int arr[], int n){
        // Your code here
        vector<vector<long long>> dp(n, vector<long long> (n, 0));
        for(int i=0;i<n;i++)
            dp[i][i] = arr[i];
        for(int diff=1;diff<n;diff++)
        {
            int i=0,j=i+diff;
            while(j<n)
            {
                int op1,op2;
                if(i+2<n)
                    op1 = arr[i] + min(dp[i+2][j],dp[i+1][j-1]);
                else if(i+1<n)
                    op1 = arr[i] + dp[i+1][j-1];
                else
                    op1 = arr[i];
                if(j-2>=0)
                    op2 = arr[j] + min(dp[i][j-2],dp[i+1][j-1]);
                else if(j-1>=0)
                    op2 = arr[j] + dp[i+1][j-1];
                else
                    op2 = arr[j];
                dp[i][j] = max(op1,op2);
                i++,j++;
            }
        }
        return dp[0][n-1];
    }
};