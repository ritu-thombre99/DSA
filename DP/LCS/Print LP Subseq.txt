Given a string S, find the longest palindromic substring in S. Substring of string S: S[ i . . . . j ] where 0 ≤ i ≤ j < len(S). Palindrome string: A string which reads the same backwards. More formally, S is palindrome if reverse(S) = S. Incase of conflict, return the substring which occurs first ( with the least starting index ).

LPS(a) = LCS(a, reverse(a))

// print first
class Solution{   
public:
    string longestPalindrome(string S){
        // code here 
        string T = S;
        reverse(T.begin(),T.end());
        vector<vector<int>> dp(S.length()+1, vector<int>(T.length()+1,0));
        int max_val=0,start=0,end=0;
        for(int i=1;i<=S.length();i++)
        {
            for(int j=1;j<=T.length();j++)
            {
                if(S[i-1]==T[j-1])
                {
                    dp[i][j] = dp[i-1][j-1]+1;
                    if(dp[i][j]>max_val)
                    {
                        max_val = dp[i][j];
                        start = S.length()-j;
                        end = i;
                    }
                }
            }
        }
        if(start>=end) 
            return string(1,S[0]);
        return S.substr(start,end-start);
    }
};


// if any
class Solution{   
public:
    string longestPalindrome(string S){
        // code here 
        string T = S;
        reverse(T.begin(),T.end());
        vector<vector<int>> dp(S.length()+1, vector<int>(T.length()+1,0));
        for(int i=1;i<=S.length();i++)
        {
            for(int j=1;j<=T.length();j++)
            {
                if(S[i-1]==T[j-1])
                    dp[i][j] = dp[i-1][j-1]+1;
                else
		    dp[i][j] = max(dp[i-1][j],dp[i][j-1]);
            }
        }
        string ans = "";
	int i=S.length(), j=T.length();
	while(i>0 && j>0)
	{
		if(S[i-1] == T[j-1])
		{
			ans = s1[i-1] + ans;
			i = i-1;
			j = j-1;
		}
		else if(dp[i-1][j] > dp[i][j-1])
			i = i-1;
		else
			j = j-1;
	}
	return ans;
    }
};
