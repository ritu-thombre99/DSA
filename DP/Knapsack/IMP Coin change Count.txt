Given a value N, find the number of ways to make change for N cents, if we have infinite supply of each of S = { S1, S2, .. , SM } valued coins.

// Memorization solution - dp[i][j] holds number of ways (j) can be changes using coins S[0 to i]

class Solution {
  public:
    long long int solve(vector<vector<long long int>> &dp, int i, int w, int S[])
    {
        if(i<=0)
            return 0;
        if(w==0)
            return 1;
        if(dp[i][w]!=-1)
            return dp[i][w];
        if(S[i-1]<=w)
            dp[i][w] = solve(dp,i-1,w,S) + solve(dp,i,w-S[i-1],S);
        else
            dp[i][w] = solve(dp,i-1,w,S);
        return dp[i][w];
    }
    long long int count(int S[], int m, int n) {

	    // Your code goes here
	    vector<vector<long long int>> dp(m+1,vector<long long int>(n+1,-1));
        return solve(dp,m,n,S);

    }
};


//Iterative solution

class Solution {
  public:
    long long int count(int S[], int m, int n) 
    {
	    // Your code goes here
	    vector<vector<long long int>> dp(m+1,vector<long long int>(n+1,0));
	    for(int i=0;i<=m;i++)
	        dp[i][0] = 1;
        for(int j=1;j<=n;j++)
        {
	        for(int i=1;i<=m;i++)
	        {
	            int x=0,y=0;
	            if(j-S[i-1]>=0)
	                dp[i][j] = dp[i][j-S[i-1]] + dp[i-1][j];
                else
                    dp[i][j] = dp[i-1][j];
	        }
        }
        return dp[m][n];

    }
};

// Iterative space optimized solution

dp[i] holds number of ways in which i cents can be changed

class Solution {
  public:
    long long int count(int S[], int m, int n) {

	    // Your code goes here
	    vector<long long int> dp(n+1,0);
	    dp[0] = 1;
        for(int i=0;i<m;i++)
            for(int j=S[i];j<=n;j++)
                dp[j] += dp[j-S[i]]; //value of each coin is 1

        return dp[n];

    }
};