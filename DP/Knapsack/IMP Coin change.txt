Given a value V and array coins[] of size M, the task is to make the change for V cents, given that you have an infinite supply of each of coins{coins1, coins2, ..., coinsm} valued coins. Find the minimum number of coins to make the change. If not possible to make change then return -1.

// iterative space optimized solution
class Solution{

	public:
	int minCoins(int coins[], int M, int V) 
	{ 
	    // Your code goes here
	    vector<int> dp(V+1,INT_MAX);
	    dp[0] = 0;
	    for(int w=1;w<=V;w++)
	        for(int i=0;i<M;i++)
	            if(coins[i]<=w && dp[w-coins[i]]!=INT_MAX)
	                dp[w] = min(dp[w],1+dp[w-coins[i]]); //value of each coin is 1
        if(dp[V]==INT_MAX)
            return -1;
        return dp[V];
	} 
	  
};

// iterative solution

class Solution{

	public:
	int minCoins(int coins[], int M, int V) 
	{ 
	    // Your code goes here
	vector<vector<int>> dp(M+1,vector<int>(V+1,-1));
	for(int i=0;i<=M;i++)
	        dp[i][0] = 0; // 0 coins to make 0 change
        for(int i=1;i<=V;i++)
            dp[0][i] = INT_MAX-1; // no coins avaiable to make (j) change so infinite coins of NULL value required
        for(int i=1;i<=M;i++)
        {
            for(int j=1;j<=V;j++)
            {
                if(coins[i-1]<=j)
                    dp[i][j] = min(dp[i-1][j], 1+dp[i][j-coins[i-1]]);
                else
                    dp[i][j] = dp[i-1][j];
            }
        }
        if(dp[M][V]==INT_MAX-1)
            return -1;
        return dp[M][V];
	} 
	  
};

// memorization solution
class Solution{

	public:
	int solve(vector<vector<int>> &dp, int n, int V, int coins[])
	{
	    if(n<=0)
	        return INT_MAX-1; // infinite coins of NULL value to make change
        if(V==0)
            return 0; // 0 coins to make 0 change
        if(dp[n][V]!=-1)
            return dp[n][V];
        if(coins[n-1]<=V)
        {
            dp[n][V] = min(solve(dp,n-1,V,coins), solve(dp,n,V-coins[n-1],coins)+1); // notice how if coins[n-1] is used then n is passes as is to use it again
            return dp[n][V];
        }
        else
        {
            dp[n][V] = solve(dp,n-1,V,coins);
            return dp[n][V];
        }
	}
	int minCoins(int coins[], int M, int V) 
	{ 
	    // Your code goes here
	    vector<vector<int>> dp(M+1,vector<int>(V+1,-1));
	    solve(dp, M, V, coins);
        if(dp[M][V]==INT_MAX-1)
            return -1;
        return dp[M][V];
	} 
	  
};