\\ memorized solution
class Solution
{
    public:
    //Function to return max value that can be put in knapsack of capacity W.
    int solve(vector<vector<int>> &dp, int n, int W, int wt[], int val[])
    {
        if(n<0)
            return 0;
        if(dp[n][W]!=-1)
            return dp[n][W];
        if(wt[n] <= W)
            dp[n][W] = max(val[n]+solve(dp,n-1,W-wt[n],wt,val),solve(dp,n-1,W,wt,val));
        else
            dp[n][W] = solve(dp,n-1,W,wt,val);
        return dp[n][W];

    }
    int knapSack(int W, int wt[], int val[], int n) 
    { 
       // Your code here
       vector<vector<int>> dp(n,vector<int>(W+1,-1));
       return solve(dp,n-1,W,wt,val);
    }
};

\\ iterative solution
\\ dp[i][j] -> maximum value that can be obtained by using items from (0 to i) for weight limit (j)
class Solution
{
    public:
    //Function to return max value that can be put in knapsack of capacity W.
    int knapSack(int W, int wt[], int val[], int n) 
    { 
       // Your code here
        vector<vector<int>> dp(n+1,vector<int>(W+1,0));
        for(int i=1;i<=n;i++)
        {
            for(int j=1;j<=W;j++)
            {
                if(wt[i-1] <= j)
                    dp[i][j] = max(dp[i-1][j], dp[i-1][j-wt[i-1]] + val[i-1]);
                else
                    dp[i][j] = dp[i-1][j];
            }
        }
        return dp[n][W];
    }
};

\\ space otpimized iterative

dp[w] -> maximum value that can be obtained for weight limit w
class Solution
{
    public:
    //Function to return max value that can be put in knapsack of capacity W.
    int knapSack(int W, int wt[], int val[], int n) 
    { 
       // Your code here
       vector<int> dp(W+1,0);
       for(int i=0;i<n;i++) // each item used only once
          for(int w=W;w>=0;w--) // check weight for that item
              if(wt[i]<=w)
                    dp[w] = max(dp[w], dp[w-wt[i]]+val[i]);
       return dp[W];
    }
};