class Solution{   
public:
// memorization // top down
    bool solve(vector<int> &arr, int n, int sum, vector<vector<int>> &dp)
    {
        if(n<0 || sum<0)
            return false;
        if(sum == 0)
            return true;
        if(dp[n][sum]!=-1)
            return dp[n][sum];
        dp[n][sum] = solve(arr,n-1,sum-arr[n-1],dp)||solve(arr,n-1,sum,dp);
        return dp[n][sum];
    }
    bool isSubsetSum(vector<int>arr, int sum){
        // code here 
        int n = arr.size();
        vector<vector<int>> dp(n+1, vector<int>(sum+1, -1)); //table of size n+1*sum+1 
							     //The state DP[i][j] will be true if there exists a subset of elements from A[0....i] with sum value = 'j'.
        return solve(arr,n,sum,dp);
    }
};

// tabulation // bottom up

bool SubsetSum(vector<int>arr, int sum){
        // code here 
        int n = arr.size();
        vector<vector<int>> dp(n+1, vector<int>(sum+1, -1));
        for(int i=0;i<=n;i++)
            dp[i][0] = 1;
        for(int j=1;j<=sum;j++)
            dp[0][j] = 0;
        for(int i=1;i<=n;i++)
        {
            for(int j=1;j<=sum;j++)
            {
                if(arr[i-1]>j)
                    dp[i][j] = dp[i-1][j];
                else
                    dp[i][j] = dp[i-1][j]||dp[i-1][j-arr[i-1]];
            }
        }
        return dp[n][sum];
    }
};