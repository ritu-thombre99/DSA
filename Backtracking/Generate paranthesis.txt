Given an integer N representing the number of pairs of parentheses, the task is to generate all combinations of well-formed(balanced) parentheses.

Time Complexity: O(2^n). 
For every index there can be two options '{' or '}'. So it can be said that the upper bound of time complexity is O(2^n) or it has exponential time complexity.
Space Complexity: O(n). 
The space complexity can be reduced to O(n) if global variable or static variable is used to store the output string.


//method 1 - keeping track of open and close brakets
class Solution
{
    public:
    void generateParenthesis(int n, int open, int close, string s, vector<string> &ans)
    {
        if(open==n && close==n)
        {
            ans.push_back(s);
            return;
        }  
        if(open<n)
            generateParenthesis(n, open+1, close, s+"(", ans);
        if(close<open)
            generateParenthesis(n, open, close+1, s+")", ans);
    }
    vector<string> AllParenthesis(int n) 
    {
        // Your code goes here 
        vector<string> ans;
        generateParenthesis(n,0,0,"",ans);
        return ans;
    }
};

// method 2 - may not satisfy required order
class Solution
{
    public:
    vector<string> AllParenthesis(int n) 
    {
        // Your code goes here 
        vector<string> ans;
        vector<string> two;
        if(n==1)
        {
            two.push_back("()");
            return two;
        }
        if(n==2)
        {
            two.push_back("(())");
            two.push_back("()()");
            return two;
        }
        two = AllParenthesis(n-1);
        for(int i=0;i<two.size();i++)
        {
            ans.push_back("("+two[i]+")");
            ans.push_back("()"+two[i]);
            ans.push_back(two[i]+"()");
            
        }
        ans.pop_back();
        return ans;
    }
};