Given an undirected graph and an integer M. The task is to determine if the graph can be colored with at most M colors such that no two adjacent vertices of the graph are colored with the same color. Here coloring of a graph means the assignment of colors to all vertices. Print 1 if it is possible to colour vertices and 0 otherwise.

check for every color (from 1 to m) for each vertex 
if safe (i.e neighboirs do not have same color) then apply that color to that vertex and return true
else backtrack by setting color to NULL (i.e 0)

Time Complexity: O(m^V). 
There are total O(m^V) combination of colors. So time complexity is O(m^V). The upperbound time complexity remains the same but the average time taken will be less.
Space Complexity: O(V). 
Recursive Stack of graphColoring(â€¦) function will require O(V) space.


bool isSafe(int v, bool graph[101][101], int n, vector<int> color, int c)
{
    for(int i=0;i<n;i++)
        if (graph[v][i] && c == color[i])
            return false;
             
    return true;
}
bool util(bool graph[101][101], vector<int> &color, int m, int n, int v)
{
    if(v>=n)
        return true;
    for(int c=1;c<=m;c++)
    {
        if(isSafe(v,graph,n,color,c))
        {
            color[v] = c;
            if(util(graph,color,m,n,v+1)==true)
                return true;
            color[v] = 0;
            
        }
    }
    return false;
}
bool graphColoring(bool graph[101][101], int m, int n)
{
    // your code here
    vector<int> color;
    for(int i=0;i<n;i++)
        color.push_back(0);
    if(util(graph,color,m,n,0)==true)
        return true;
    return false;
}

