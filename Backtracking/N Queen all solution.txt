difference in solution of printing one solution from printing all solution is we do not return fter placing queen
we keep on branching

as a result time complexity is exponential N^N

This means it will look through every position on an NxN board, N times, for N queens

class Solution{
public:
    bool isSafe(vector<vector<int>> &board,int row, int col)
    {
        int i, j;
        int N = board.size();
        for (i = 0; i < col; i++)
            if (board[row][i])
                return false;
        for (i = row, j = col; i >= 0 && j >= 0; i--, j--)
            if (board[i][j])
                return false;
        for (i = row, j = col; j >= 0 && i < N; i++, j--)
            if (board[i][j])
                return false;
     
        return true;
    }
    bool solveNQUtil(vector<vector<int>>& board, int col, vector<vector<int>> &result)
    {
        int N = board.size();
        if (col == N) 
        {
            vector<int> v;
            for (int i = 0; i < N; i++) 
            {
                for (int j = 0; j < N; j++) 
                {
                    if (board[i][j] == 1)
                        v.push_back(j + 1);
                }
            }
            result.push_back(v);
            return true;
        }
        bool res = false;
        for (int i = 0; i < N; i++) 
        {
            if (isSafe(board, i, col)) 
            {
                board[i][col] = 1;
                res = solveNQUtil(board, col + 1, result) || res;
                board[i][col] = 0; 
            }
        }
        return res;
    }
    vector<vector<int>> nQueen(int n) 
    {
        // code here
        vector<vector<int>> board(n, vector<int>(n, 0));
        vector<vector<int>> result;
        if (solveNQUtil(board, 0, result) == false) 
            return {};
        sort(result.begin(),result.end());
        return result;
    }
};