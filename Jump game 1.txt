Given an positive integer N and a list of N integers A[]. Each element in the array denotes the maximum length of jump you can cover. Find out if you can make it to the last index if you start at the first index of the list.

O(n) time O(1) space
Solution - We only have to check ig we can reach the end (no need to find the optimal/shortest path)

Greedy approach
1. Keep updating goals so current goal = index N-1
2. for i=N-1 fown to 0, we check if (i+arr[i])>= goal i.e it is possible to reach goal index from current index i
	so update goal = i

at the end if goal=0, return true else false
class Solution {
  public:
    int canReach(int A[], int N) 
    {
        // code here
        int goal = N-1;
        for(int i=N-1;i>=0;i--)
            if(i+A[i]>=goal)
                goal=i;
        if(goal==0)
            return 1;
        return 0;
    }
};