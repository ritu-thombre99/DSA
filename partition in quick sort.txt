lomuto partition

partition(arr[], lo, hi) 
    pivot = arr[hi]
    i = lo     // place for swapping
    for j := lo to hi â€“ 1 do
        if arr[j] <= pivot then
            swap arr[i] with arr[j]
            i = i + 1
    swap arr[i] with arr[hi]
    return i

complexity goes to n^2 when using first element (if array is in decreasing order)
p = 1 therefore quicksort(2 to n) (n-1) times
and so on
1 + 2 + 3 + 4 ... + n


hoare partition

partition(arr[], lo, hi)
   pivot = arr[lo]
   i = lo - 1  // Initialize left index
   j = hi + 1  // Initialize right index

   // Find a value in left side greater
   // than pivot
   do
      i = i + 1
   while arr[i] < pivot

   // Find a value in right side smaller
   // than pivot
   do
      j--;
   while (arr[j] > pivot);

   if i >= j then 
      return j

   swap arr[i] with arr[j]

\\ mid pivot
    def partition(self,arr,low,high):
        # code here
        mid = int((low+high)/2)
        x = arr[mid]
        i,j = low,high
        while i<mid and arr[i] <= x:
            i=i+1
        while j>=mid and arr[j] > x:
            j=j-1
        temp = arr[j]
        arr[j] = arr[i]
        arr[i] = temp
        i = i + 1
        j = j - 1
        while i<j:
            while i<mid and arr[i] <= x:
                i=i+1
            while j>=mid and arr[j] > x:
                j= j-1
            temp = arr[j]
            arr[j] = arr[i]
            arr[i] = temp
        return mid


quicksort(int arr[], int lo, in hi)
	if(lo < hi)
		p = partitiom(arr, lo, hi)
		quicksort(arr, lo, p-1)
		quicksort(arr, p+1, hi)