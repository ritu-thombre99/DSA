why is parent used?

if we only used visited array then parent of current node is visited and will appear in its neighbor
so graph will always be marked as cyclic
to avoid this we check if adcent of current nodes have parent other than parent of current node

O(E+v)
//dfs based approach
class Solution {
  public:
    // Function to detect cycle in an undirected graph.
    bool dfs(int v,vector<int> adj[],bool visited[], int parent)
    {
        visited[v] = true;
        for (auto i = adj[v].begin(); i != adj[v].end(); ++i)
        {
            if (!visited[*i])
            {
               if (dfs(*i, adj, visited, v))
                  return true;
            }
            else if (*i != parent)
               return true;
        }
        return false;
    }
    bool isCycle(int V, vector<int> adj[]) {
        // Code here
        bool visited[V];
        for(int i=0;i<V;i++)
            visited[i] = false;
        for(int i=0;i<V;i++)
            if(visited[i] == false && dfs(i,adj,visited,-1)==true)
                return true;
        return false;
    }
};


//using disjoint set O(V*E)


int find(int parent[], int i)
{
	if (parent[i] == -1)
		return i;
	return find(parent, parent[i]);
}

void Union(int parent[], int x, int y)
{
	parent[x] = y;
}

int isCycle(Graph* graph)
{
	int* parent = new int[graph->V * sizeof(int)];
	memset(parent, -1, sizeof(int) * graph->V);
	for (int i = 0; i < graph->E; ++i) {
		int x = find(parent, graph->edge[i].src);
		int y = find(parent, graph->edge[i].dest);
		if (x == y)
			return 1;
		Union(parent, x, y);
	}
	return 0;
}

Note that the implementation of union() and find() is naive and takes O(n) time in the worst case. These methods can be improved to O(Logn) using Union by Rank or Height. We will soon be discussing Union by Rank in a separate post. 