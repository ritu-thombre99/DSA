Euler path - visits every edge once (may visit nodes multiple times)

Euler circuit - visited every edge and returns to the source vertex

Conditions
1. do not include zero degree vertx. If no edges then there is an Euler path (no edge so all edges visited)
2. all non zeros degree nodes should be connected

3 For circuit - all nodes must have even degree (one for coming in and one for going out)
  For path - 2 nodes have odd degree rest all have even degree (odd degree prevents retraversal)

Complexity - O(V+E) time
O(V) space


1. find non zeros degree node and do dfs from it
   if no non zero degree node found return EULER PATH
2. after dfs if there is any node with non zero degree which is not visited (i.e disconnected graph) 
   return NO PATH/CIRCUIT
3. count odd degree nodes
   if(odd==2) return EULER PATH
   if(odd!=2 && odd>1) return NO PATH or CYCLE
   if(odd==0) return EULER CIRCUIT


class Solution {
public:
    void dfs(int u, vector<bool> &visited, vector<int> adj[])
    {
        visited[u] = true;
        for(auto itr = adj[u].begin();itr!=adj[u].end();itr++)
            if(!visited[*itr])
                dfs(*itr,visited,adj);
    }
	int isEularCircuit(int V, vector<int>adj[]){
	    // Code here
	    vector<bool> visited(V,false);
	    int source = 0;
	    while(source<V)
	    {
	        if(adj[source].size()>0)
	            break;
            source++;
	    }
	    if(source==V)
	        return 1; // euler path
	    dfs(source,visited,adj);
	    
	    for(int i=0;i<V;i++)
	        if(!visited[i] && adj[i].size()>0)
	            return 0;
        int odd=0;
        for(int i=0;i<V;i++)
            if(adj[i].size()%2==1)
                odd++;
        if(odd==2)
            return 1; // euler path
        else if(odd>1)
            return 0;
        return 2; // euler circuit
	}
};