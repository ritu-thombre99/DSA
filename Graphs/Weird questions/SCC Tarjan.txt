Complexity - same as DFS O(V+E)

class Solution
{
    public:
    void solve(int u,int disc[],int low[],bool visited[],bool recstack[], stack<int> &s, 
              vector<vector<int>> &ans, vector<int> adj[])
    {
        static int t = 0;
        low[u] = disc[u] = ++t;
        visited[u] = recstack[u] = true;
        s.push(u);
        for(int i=0;i<adj[u].size();i++)
        {
            int v = adj[u][i];
            if(!visited[v])
            {
                solve(v,disc,low,visited,recstack,s,ans,adj);
                low[u] = min(low[u],low[v]);
            }
            else if(recstack[v]==true)// if there is back edge in current dfs subtree (to avoid cross edge)
                low[u] = min(low[u], disc[v]);
        }
        
        if(disc[u] == low[u]) // new SCC component with same low values
        {
            vector<int> scc;
            while(!s.empty() && s.top()!=u)
            {
                recstack[s.top()] = false;
                scc.push_back(s.top());
                s.pop();
            }
            if(!s.empty())
            {
                recstack[s.top()] = false;
                scc.push_back(s.top());
                s.pop();
            }
            sort(scc.begin(),scc.end());
            ans.push_back(scc);
        }
    }
    vector<vector<int>> tarjans(int V, vector<int> adj[])
    {
        //code here
        int disc[V]={0}, low[V]={0};
        bool recstack[V]={false}, visited[V]={false};
        vector<vector<int>> ans;
        stack<int> s;
        for(int i=0;i<V;i++)
            if(!visited[i])
                solve(i,disc,low,visited,recstack,s,ans,adj);
        sort(ans.begin(),ans.end());
        return ans;
    }
};