Given a dictionary of distinct words and an M x N board where every cell has one character. Find all possible words from the dictionary that can be formed by a sequence of adjacent characters on the board. We can move to any of 8 adjacent characters

Note: While forming a word we can move to any of the 8 adjacent cells. A cell can be used only once in one word.




Complexity - Number of words*length of word*row*col
Inefficient
efficient using tries


class Solution {
public:
    vector<pair<int,int>> dir={{0,1},{1,0},{0,-1},{-1,0},{-1,-1},{1,1},{-1,1},{1,-1}};
    bool dfs(int x,int y,vector<vector<char>> &board, string word,int ind)
    {
        if(ind == word.size())
            return true;
        if(x<0 || y<0 || x>=board.size() || y>=board[0].size() || board[x][y] != word[ind]) 
            return false;
        char ch = board[x][y];
        board[x][y] = '.';
        
        for(auto pos:dir)
        {
            int row = x + pos.first;
            int col = y + pos.second;
            if(dfs(row,col,board,word,ind+1) == true)
            {
                board[x][y] = ch;
                return true;
            }
        }
        board[x][y] = ch;
        return false;
    }
    bool search(vector<vector<char>> &board, string word)
    {
        for(int i=0;i<board.size();i++)
        {
            for(int j=0;j<board[0].size();j++)
            {
                if(dfs(i,j,board,word,0)==true)
                    return true;
            }
        }
        return false;
    }
	vector<string> wordBoggle(vector<vector<char> >& board, vector<string>& dictionary) {
	    // Code here
	    vector<string> v;
	    for(int i=0;i<dictionary.size();i++)
	        if(search(board, dictionary[i]) == true)
	            v.push_back(dictionary[i]);
        return v;
	}
};