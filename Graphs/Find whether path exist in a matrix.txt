Given a grid of size n*n filled with 0, 1, 2, 3. Check whether there is a path possible from the source to destination. You can traverse up, down, right and left.
The description of cells is as follows:

A value of cell 1 means Source.
A value of cell 2 means Destination.
A value of cell 3 means Blank cell.
A value of cell 0 means Wall.
Note: There are only a single source and a single destination.

Use bfs on matrix itself
keep track of visited elements
push univisted neighboirs to queue
if popped element is destination return true
when queue is empty i means there is not path so return false

Complexity - O(n*n)

class Solution
{
    public:
    //Function to find whether a path exists from the source to destination.
    bool is_Possible(vector<vector<int>>& grid) 
    {
        //code here
        pair<int,int> src;
        vector<vector<bool>> visited;
        for(int i=0;i<grid.size();i++)
        {
            vector<bool> temp;
            for(int j=0;j<grid[i].size();j++)
            {
                temp.push_back(false);
                if(grid[i][j] == 1)
                    src = {i,j};
            }
            visited.push_back(temp);
        }
        queue<pair<int,int>> q;
        q.push(src);
        int n = grid.size();
        while(!q.empty())
        {
            pair<int,int> temp = q.front();
            q.pop();
            int row = temp.first;
            int col = temp.second;
            if(grid[row][col] == 2)
                return true;
            visited[row][col] = true;
            if(row+1<n && visited[row+1][col]==false && grid[row+1][col]!=0)
                q.push({row+1,col});
            if(col+1<n && visited[row][col+1]==false && grid[row][col+1]!=0)
                q.push({row,col+1});
            if(row-1>=0 && visited[row-1][col]==false && grid[row-1][col]!=0)
                q.push({row-1,col});
            if(col-1>=0 && visited[row][col-1]==false && grid[row][col-1]!=0)
                q.push({row,col-1});
        }
        return false;
    }
};

