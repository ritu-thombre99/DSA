Given a grid of dimension nxm where each cell in the grid can have values 0, 1 or 2 which has the following meaning:
0 : Empty cell
1 : Cells have fresh oranges
2 : Cells have rotten oranges

We have to determine what is the minimum time required to rot all oranges. A rotten orange at index [i,j] can rot other fresh orange at indexes [i-1,j], [i+1,j], [i,j-1], [i,j+1] (up, down, left and right) in unit time. 

Solution using BFS
enque all the rotten oranges to queue (rotten at time=0)
enter while loop untill queue not empty

denote current size and deque it while(size>0) size--
while dequeing, enqueue all the neighbours which have fresh orange to current dequed orange
Space complexity = O(r*c) queue
time complexity - each index visited once (O(r*c))


class Solution 
{
    public:
    //Function to find minimum time required to rot all oranges. 
    int orangesRotting(vector<vector<int>>& grid) {
        // Code here
        queue<pair<int,int>> q;
        for(int i=0;i<grid.size();i++)
            for(int j=0;j<grid[0].size();j++)
                if(grid[i][j] == 2)
                    q.push({i,j});
        
        vector<pair<int,int>> neighs{{-1,0},{1,0},{0,-1},{0,1}};
        // vector<vector<pair<int,int>>> v;
        int count = 0;
        while(!q.empty())
        {
            int size = q.size();
            vector<pair<int,int>> temp;
            while(!q.empty() && size--)
            {
                pair<int,int> pos = q.front();
                // temp.push_back(pos);
                q.pop();
                for(int i=0;i<neighs.size();i++)
                {
                    int row = pos.first + neighs[i].first;
                    int col = pos.second + neighs[i].second;
                    if(row>=0 && col>=0 && row<grid.size() && col<grid[0].size() && grid[row][col]==1)
                    {
                        grid[row][col] = 2;
                        q.push({row,col});
                    }
                }
            }
            // v.push_back(temp);
            // temp.clear();
            count = count + 1;
        }
        for(int i=0;i<grid.size();i++)
            for(int j=0;j<grid[i].size();j++)
                if(grid[i][j] == 1)
                    return -1;
        // return v.size()-1;
        return count-1;
    }
};