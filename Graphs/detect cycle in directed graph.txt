What if we dont use recusrion stack s?
-> If we only used visited, graph containing cross edge will also be marked as cyclic.
To avoid this we keep track of visited nodes for current dfs and mrk them false when moving forward to next dfs

loop over all vertices helps if graph is disconnected

class Solution {
  public:
    // Function to detect cycle in a directed graph.
    bool DFS(int curr_node, vector<int> adj[], vector<bool> &visited, vector<bool> &s)
    {
        visited[curr_node] = true;
        s[curr_node] = true;
        for(auto x: adj[curr_node])
        {
            if(visited[x] == false && DFS(x,adj,visited,s)==true)
                return true;
            else if (s[x] == true) 
                return true;
        }
        s[curr_node] = false;
        return false;
    }
    bool isCyclic(int V, vector<int> adj[]) {
        // code here
        vector<bool> s(V, false);
        vector<bool> visited(V, false);
        for(int i = 0; i < V; i++)
            if (visited[i]==false && DFS(i, adj, visited, s)==true)
                return true;
        return false;
    }
};

// using colors
WHITE : Vertex is not processed yet. Initially, all vertices are WHITE.
GRAY: Vertex is being processed (DFS for this vertex has started, but not finished which means that all descendants (in DFS tree) of this vertex are not processed yet (or this vertex is in the function call stack)
BLACK : Vertex and all its descendants are processed. 

While doing DFS, if an edge is encountered from current vertex to a GRAY vertex, then this edge is back edge and hence there is a cycle. 


#include <bits/stdc++.h>
using namespace std;

enum Color {WHITE, GRAY, BLACK};

bool Graph::DFSUtil(int u, int color[])
{
	color[u] = GRAY;

	list<int>::iterator i;
	for (i = adj[u].begin(); i != adj[u].end(); ++i)
	{
		int v = *i; 
		if (color[v] == GRAY)
			return true;

		if (color[v] == WHITE && DFSUtil(v, color))
			return true;
	}
	color[u] = BLACK;
	return false;
}

bool Graph::isCyclic()
{
	// Initialize color of all vertices as WHITE
	int *color = new int[V];
	for (int i = 0; i < V; i++)
		color[i] = WHITE;

	// Do a DFS traversal beginning with all vertices
	for (int i = 0; i < V; i++)
		if (color[i] == WHITE)
			if (DFSUtil(i, color) == true)
				return true;

	return false;
}


