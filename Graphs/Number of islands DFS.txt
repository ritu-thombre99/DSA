Count number of islands

Basically we just have to check number of disconnected components using dfs
each dfs will call its 8 UNIVISTED and 1 VALUED neighbours

run for loop for all nodes
if node is unvisited and 1 VALUED, call dfs on it and increment island number (which will traverse the island in which this node is present)

Complexity - Same as DFS(ROW*COL)

class Solution {
  public:
    // Function to find the number of islands.
    void dfs(int i,int j,int n, int m, vector<vector<bool>> &visited, vector<vector<char>> grid)
    {
        visited[i][j] = true;
        vector<pair<int,int>> adj{{i-1,j-1},{i-1,j+1},{i+1,j-1},{i+1,j+1},
                                  {i-1,j},{i+1,j},{i,j-1},{i,j+1}};
        for(int i=0;i<adj.size();i++)
        {
            int row = adj[i].first;
            int col = adj[i].second;
            if(row<n && row>=0 && col<m && col>=0 && visited[row][col]==false && grid[row][col]=='1')
                dfs(row,col,n,m,visited,grid);
        }
    }
    int numIslands(vector<vector<char>>& grid) {
        // Code here
        vector<vector<bool>> visited;
        int n = grid.size();
        int m = grid[0].size();
        for(int i=0;i<n;i++)
        {
            vector<bool> temp;
            for(int j=0;j<m;j++)
                temp.push_back(false);
            visited.push_back(temp);
        }
        int islands = 0;
        for(int i=0;i<n;i++)
        {
            for(int j=0;j<m;j++)
                if(grid[i][j]=='1' && visited[i][j]==false)
                    islands=islands+1,dfs(i,j,n,m,visited,grid);
        }
        return islands;
    }
};

Alternate dfs solution: Instead of using VISITED array, we can simply 1 VALUED to 0 VALUE and use that as visited

void DFS(vector<vector<int>> &M, int i, int j, int ROW,
         int COL)
{
    //Base condition
    //if i less than 0 or j less than 0 or i greater than ROW-1 or j greater than COL-  or if M[i][j] != 1 then we will simply return
    if (i < 0 || j < 0 || i > (ROW - 1) || j > (COL - 1) || M[i][j] != 1)
        return;

    if (M[i][j] == 1)
    {
        M[i][j] = 0; // mark visited
        DFS(M, i + 1, j, ROW, COL);     //right side traversal
        DFS(M, i - 1, j, ROW, COL);     //left side traversal
        DFS(M, i, j + 1, ROW, COL);     //upward side traversal
        DFS(M, i, j - 1, ROW, COL);     //downward side traversal
        DFS(M, i + 1, j + 1, ROW, COL); //upward-right side traversal
        DFS(M, i - 1, j - 1, ROW, COL); //downward-left side traversal
        DFS(M, i + 1, j - 1, ROW, COL); //downward-right side traversal
        DFS(M, i - 1, j + 1, ROW, COL); //upward-left side traversal
    }
}

int countIslands(vector<vector<int>> &M)
{
    int ROW = M.size();
    int COL = M[0].size();
    int count = 0;
    for (int i = 0; i < ROW; i++)
    {
        for (int j = 0; j < COL; j++)
        {
            if (M[i][j] == 1)
            {
                M[i][j] = 0;
                count++;
                DFS(M, i + 1, j, ROW, COL);     //right side traversal
                DFS(M, i - 1, j, ROW, COL);     //left side traversal
                DFS(M, i, j + 1, ROW, COL);     //upward side traversal
                DFS(M, i, j - 1, ROW, COL);     //downward side traversal
                DFS(M, i + 1, j + 1, ROW, COL); //upward-right side traversal
                DFS(M, i - 1, j - 1, ROW, COL); //downward-left side traversal
                DFS(M, i + 1, j - 1, ROW, COL); //downward-right side traversal
                DFS(M, i - 1, j + 1, ROW, COL); //upward-left side traversal
            }
        }
    }
    return count;
}
