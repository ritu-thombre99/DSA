Complexity - O(E)
Only traversing edges

for every disconnected component, chose a global parent
initially every node will be parent of itself
once Union is finished
there will be one parent for every disconnected component
so count where (parent[i] == i)
class Solution {
  public:
    int Union(int parent[], int x)
    {
        if (parent[x] == x)
            return x;
        return Union(parent, parent[x]);
    }
    int numProvinces(vector<vector<int>> adj, int V) {
        // code here
        int parent[V];
        for(int i=0;i<V;i++)
            parent[i] = i;
        for(int i=0;i<V;i++)
            for(int j=i+1;j<V;j++)
                if(adj[i][j] == 1)
                    parent[Union(parent,i)] = Union(parent,j);
        int count = 0;
        for(int i=0;i<V;i++)
            count = count + (parent[i]==i);
        return count;
    }
};