Given a grid of dimension nxm containing 0s and 1s. Find the unit area of the largest region of 1s.
Region of 1's is a group of 1's connected 8-directionally (horizontally, vertically, diagonally).

Complexity - O(mxn)
Solution using BFS (Lee's algorithm_) check all 8 neighbours and push them to queue if they are unvisited and have 1 value

class Solution
{
    public:
    //Function to find unit area of the largest region of 1s.
    void bfs(vector<vector<int>>& grid, vector<vector<bool>>& visited,int x, int y, int &largest_area)
    {
        visited[x][y] = true;
        if(grid[x][y] == 0) 
            return;
        queue<pair<int,int>> q;
        q.push({x,y});
        int area = 1;
        vector<pair<int,int>> neighs{{-1,-1},{-1,1},{1,-1},{1,1},{-1,0},{1,0},{0,-1},{0,1}};
        while(!q.empty())
        {
            pair<int,int> pos = q.front();
            q.pop();
            for(int i=0;i<neighs.size();i++)
            {
                int row = pos.first + neighs[i].first;
                int col = pos.second + neighs[i].second;
                if(row>=0 && col>=0 && row<grid.size() && col<grid[0].size() && visited[row][col]==false)
                {
                    visited[row][col] = true;
                    if(grid[row][col] == 1)
                    {
                        area = area+1;
                        q.push({row,col});
                    }
                }
            }
        }
        if(area>largest_area)
            largest_area = area;
    }
    int findMaxArea(vector<vector<int>>& grid) {
        // Code here
        vector<vector<bool>> visited;
        for(int i=0;i<grid.size();i++)
        {
            vector<bool> temp;
            for(int j=0;j<grid[i].size();j++)
                temp.push_back(false);
            visited.push_back(temp);
        }
        int largest_area = INT_MIN;
        for(int i=0;i<grid.size();i++)
        {
            for(int j=0;j<grid[i].size();j++)
                if(visited[i][j] == false)
                    bfs(grid,visited,i,j,largest_area);
        }
        return largest_area;
    }
};