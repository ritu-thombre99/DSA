Greedy approach
Sort meetings according tp their finish times
include first meeting -> i=0
now for j=1 to rest of the meetings:
	if start_time(j) >= finish_time(i) i.e next meeting starts after/just after finishing current meeting
		insert meeting j into answer
		make current meeting = j

O(nlogn)
// C++ program to find maximum number of meetings
#include <bits/stdc++.h>
using namespace std;

// Function for finding maximum meeting in one room
bool compare(pair<int,int> a,pair<int,int> b)
{
  	if(a.second!=b.second)
      	return (a.second<b.second);
  	else
      	return (a.first<b.first);
}
void maxMeetings(vector<int> &s, vector<int> &f, int n)
{
    vector<pair<int,int>> v;
	for (int i=0;i<n;i++)
		v.push_back({s[i],f[i]});
	sort(v.begin(),v.end(),compare);
	vector<pair<int,int>> m;
	int i=0;
	m.push_back(v[0]);
    for(int j=1;j<v.size();j++)
      	if(v[j].first >= m[i].second)
          	m.push_back(v[j]),i=j;

	for (int i = 0; i < m.size(); i++)
		cout << m[i].first << " " << m[i].second << endl;
}

// Driver code
int main()
{
	vector<int> s{ 1, 3, 0, 5, 8, 5 };
	vector<int> f{ 2, 4, 6, 7, 9, 9 };
	int n = s.size();
	maxMeetings(s, f, n);
	return 0;
}
