
You are given an integer array prices where prices[i] is the price of a given stock on the ith day.

On each day, you may decide to buy and/or sell the stock. You can only hold at most one share of the stock at any time. However, you can buy it then immediately sell it on the same day.

Find and return the maximum profit you can achieve.

Solved with dynamic programming
if buy
	max(-(buy current stock)+(sell from next stoack), don't buy current stock i.e but from next stock)

else
	max(sell current stock+(buy from next stock), dont sell current stock i.e sell from next stock)


class Solution {
public:
    int find(vector<int>& prices, vector<vector<int>> &dp, int index, bool buy)
    {
        if(index >= prices.size())
            return 0;
        if(dp[index][buy]!=-1)
            return dp[index][buy];
        if(buy)  // buy now (- because cost price)
            dp[index][buy] = max(-prices[index]+find(prices,dp,index+1,!buy),
                                 find(prices,dp,index+1,buy));
        else // sell now (+ because selling price)
            dp[index][buy]=max(prices[index]+find(prices,dp,index+1,!buy),
                               find(prices,dp,index+1,buy));
        return dp[index][buy];
    }
    int maxProfit(vector<int>& prices) {
        vector<vector<int>> dp(prices.size(), vector<int> (2,-1));
        return find(prices, dp, 0, 1);
    }
}; 